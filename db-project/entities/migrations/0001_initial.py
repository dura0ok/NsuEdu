# Generated by Django 5.0.4 on 2024-05-19 07:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Outlet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        db_comment="Адрес",
                        help_text="Введите адрес здания.",
                        max_length=200,
                        verbose_name="Адрес",
                    ),
                ),
                (
                    "num_workers",
                    models.IntegerField(
                        help_text="Количество работников",
                        verbose_name="Количество работников",
                    ),
                ),
            ],
            options={
                "verbose_name": "Здание",
                "verbose_name_plural": "Здания",
                "db_table": "outlets",
                "db_table_comment": "Здания",
            },
        ),
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        db_comment="ФИО клиента",
                        help_text="Введите ФИО клиента.",
                        max_length=50,
                        verbose_name="Фио",
                    ),
                ),
                (
                    "is_professional",
                    models.BooleanField(
                        db_comment="Профессионал или Любитель?",
                        default=False,
                        help_text="Отметьте, если клиент является профессионалом.",
                        verbose_name="Профессионализм",
                    ),
                ),
                (
                    "discount",
                    models.PositiveSmallIntegerField(
                        db_comment="Персональная скидка",
                        help_text="Введите персональную скидку клиента.",
                        validators=[django.core.validators.MaxValueValidator(100)],
                        verbose_name="Персональная скидка",
                    ),
                ),
            ],
            options={
                "verbose_name": "Клиент(а)",
                "verbose_name_plural": "Клиенты",
                "db_table": "clients",
                "db_table_comment": "Таблица клиентов различных фотоцентров",
            },
        ),
        migrations.CreateModel(
            name="Delivery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("delivery_date", models.DateField(verbose_name="Дата поставки")),
            ],
            options={
                "verbose_name": "Поставка",
                "verbose_name_plural": "Поставки",
                "db_table": "deliveries",
                "db_table_comment": "Поставки в главный склад",
            },
        ),
        migrations.CreateModel(
            name="Firm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="Название Бренда",
                        help_text="Введите название бренда.",
                        max_length=100,
                        unique=True,
                        verbose_name="Название",
                    ),
                ),
            ],
            options={
                "verbose_name": "Бренд",
                "verbose_name_plural": "Бренды",
                "db_table": "firms",
                "db_table_comment": "Бренды товаров",
            },
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "product_name",
                    models.CharField(
                        db_comment="Название товара",
                        help_text="Введите название товара",
                        max_length=100,
                        verbose_name="Наименование",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        db_comment="Цена",
                        decimal_places=2,
                        help_text="Введите цену товара",
                        max_digits=15,
                    ),
                ),
                (
                    "firm",
                    models.ForeignKey(
                        db_comment="Связь с брэндом",
                        help_text="Выберите бренд товара",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.firm",
                        verbose_name="Бренд",
                    ),
                ),
            ],
            options={
                "verbose_name": "Товар",
                "verbose_name_plural": "Товары",
                "db_table": "items",
                "db_table_comment": "Товары",
            },
        ),
        migrations.CreateModel(
            name="OutletType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Введите название типа здания.",
                        max_length=200,
                        unique=True,
                        verbose_name="Наименование",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тип здания",
                "verbose_name_plural": "Типы зданий",
                "db_table": "outlet_types",
                "db_table_comment": "Типы зданий",
            },
        ),
        migrations.CreateModel(
            name="PaperSize",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название размера бумаги",
                        max_length=30,
                        unique=True,
                        verbose_name="Наименование",
                    ),
                ),
            ],
            options={
                "verbose_name": "Размер бумаги",
                "verbose_name_plural": "Размеры бумаги",
                "db_table": "paper_sizes",
                "db_table_comment": "Формат бумаги",
            },
        ),
        migrations.CreateModel(
            name="PaperType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название типа бумаги",
                        max_length=30,
                        unique=True,
                        verbose_name="Наименование",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тип бумаги",
                "verbose_name_plural": "Типы бумаги",
                "db_table": "paper_types",
                "db_table_comment": "Тип бумаги",
            },
        ),
        migrations.CreateModel(
            name="PrintDiscount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "photo_amount",
                    models.IntegerField(
                        db_comment="Количество фотографий, критерий",
                        help_text="Количество фотографий, критерий",
                        unique=True,
                        verbose_name="Количество фотографий",
                    ),
                ),
                (
                    "discount",
                    models.PositiveIntegerField(
                        db_comment="Размер скидки в процентах",
                        help_text="Размер скидки в процентах",
                        validators=[django.core.validators.MaxValueValidator(100)],
                        verbose_name="Предлагаемая скидка",
                    ),
                ),
            ],
            options={
                "verbose_name": "Скидка на печать",
                "verbose_name_plural": "Скидки на печать",
                "db_table": "print_discounts",
                "db_table_comment": "Скидка на печать",
            },
        ),
        migrations.CreateModel(
            name="ServiceType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Название услуги", max_length=100)),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Цена услуги",
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Цена",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тип услуги",
                "verbose_name_plural": "Типы услуг",
                "db_table": "service_types",
            },
        ),
        migrations.CreateModel(
            name="Vendor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="Название компании (поставщика)",
                        help_text="Введите название компании (поставщика)",
                        max_length=100,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Поставщик",
                "verbose_name_plural": "Поставщики",
                "db_table": "vendors",
                "db_table_comment": "Поставщики",
            },
        ),
        migrations.CreateModel(
            name="Branch",
            fields=[
                (
                    "outlet",
                    models.OneToOneField(
                        db_comment="Привязка к зданию",
                        help_text="Связь со зданием в котором расположен филиал",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="entities.outlet",
                        verbose_name="Адрес",
                    ),
                ),
            ],
            options={
                "verbose_name": "Филиал",
                "verbose_name_plural": "Филиалы",
                "db_table": "branches",
                "db_table_comment": "Филиалы",
            },
        ),
        migrations.CreateModel(
            name="PhotoStore",
            fields=[
                (
                    "outlet",
                    models.OneToOneField(
                        db_comment="Привязка к зданию",
                        help_text="Связь со зданием в котором расположен фотомагазин",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="entities.outlet",
                        verbose_name="Адрес",
                    ),
                ),
            ],
            options={
                "verbose_name": "Фотомагазин",
                "verbose_name_plural": "Фотомагазины",
                "db_table": "photo_stores",
                "db_table_comment": "Фотомагазины",
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "outlet",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="entities.outlet",
                        verbose_name="Здание",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="DeliveryItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "purchase_price",
                    models.DecimalField(
                        db_comment="Цена закупки товара",
                        decimal_places=2,
                        help_text="Цена по которой закупалась",
                        max_digits=15,
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        db_comment="Количество поставленных единиц товара",
                        help_text="Кол-во товара в поставке",
                    ),
                ),
                (
                    "delivery",
                    models.ForeignKey(
                        help_text="Связь с поставкой",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.delivery",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        help_text="Товар в поставке",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.item",
                    ),
                ),
            ],
            options={
                "verbose_name": "Товар в поставке",
                "verbose_name_plural": "Товары в поставках",
                "db_table": "delivery_items",
                "db_table_comment": "Товары в поставке",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "accept_timestamp",
                    models.DateTimeField(
                        db_comment="Когда заказ поступил",
                        default=django.utils.timezone.now,
                        help_text="Когда заказ поступил",
                        verbose_name="Время",
                    ),
                ),
                (
                    "total_amount_price",
                    models.PositiveSmallIntegerField(
                        db_comment="Суммарная цена заказа, которая рассчитывается из купленных товаров, услуг....",
                        help_text="Суммарная цена заказа, которая рассчитывается из купленных товаров, услуг....",
                        verbose_name="Суммарный чек",
                    ),
                ),
                (
                    "is_urgent",
                    models.BooleanField(
                        db_comment="Срочность заказа",
                        default=False,
                        help_text="Срочность заказа",
                        verbose_name="Срочность",
                    ),
                ),
                (
                    "accept_outlet",
                    models.ForeignKey(
                        db_comment="Где приняли заказ",
                        help_text="Где приняли заказ, адрес(здание)",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.outlet",
                        verbose_name="Адрес",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        db_comment="Клиент, который сделал заказ",
                        help_text="Клиент, который сделал заказ",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.client",
                        verbose_name="Клиент",
                    ),
                ),
            ],
            options={
                "verbose_name": "Заказ",
                "verbose_name_plural": "Заказы",
                "db_table": "orders",
                "db_table_comment": "Заказы",
            },
        ),
        migrations.AddField(
            model_name="outlet",
            name="type",
            field=models.ForeignKey(
                db_comment="Тип здания",
                help_text="Выберите тип здания.",
                on_delete=django.db.models.deletion.CASCADE,
                to="entities.outlettype",
            ),
        ),
        migrations.CreateModel(
            name="PrintOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "discount",
                    models.ForeignKey(
                        blank=True,
                        db_comment="Скидка",
                        help_text="Скидка",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.printdiscount",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        db_comment="Связь с заказом",
                        help_text="Связь с заказом",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.order",
                        verbose_name="Заказ",
                    ),
                ),
            ],
            options={
                "verbose_name": "Заказ на печать",
                "verbose_name_plural": "Заказы на печать",
                "db_table": "print_orders",
                "db_table_comment": "Заказы на печать",
            },
        ),
        migrations.CreateModel(
            name="PrintPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "price",
                    models.PositiveSmallIntegerField(
                        db_comment="Цена за (формат, печать)",
                        help_text="Укажите цену за (формат, печать)",
                        verbose_name="Цена",
                    ),
                ),
                (
                    "paper_size",
                    models.ForeignKey(
                        db_comment="Формат бумаги",
                        help_text="Выберите формат бумаги",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.papersize",
                        verbose_name="Размер",
                    ),
                ),
                (
                    "paper_type",
                    models.ForeignKey(
                        db_comment="Тип бумаги",
                        help_text="Выберите тип бумаги",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.papertype",
                        verbose_name="Тип",
                    ),
                ),
            ],
            options={
                "verbose_name": "Расценка на печать",
                "verbose_name_plural": "Расценки на печать",
                "db_table": "print_prices",
                "db_table_comment": "Расценки на печать",
            },
        ),
        migrations.CreateModel(
            name="Frame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        db_comment="Количество копий",
                        help_text="Количество копий",
                        verbose_name="Копии",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Уникальный код фотопленки",
                        max_length=255,
                        verbose_name="Код",
                    ),
                ),
                (
                    "frame_number",
                    models.IntegerField(help_text="Номер кадра", verbose_name="Кадр"),
                ),
                (
                    "print_order",
                    models.ForeignKey(
                        db_comment="Связь с заказом",
                        help_text="Связь с частью заказа на печать",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.printorder",
                        verbose_name="Заказ",
                    ),
                ),
                (
                    "print_price",
                    models.ForeignKey(
                        help_text="Связь с ценой печати",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.printprice",
                        verbose_name="Цена",
                    ),
                ),
            ],
            options={
                "verbose_name": "Кадр",
                "verbose_name_plural": "Кадры",
                "db_table": "frames",
                "db_table_comment": "Кадры",
            },
        ),
        migrations.CreateModel(
            name="SaleOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.PositiveSmallIntegerField(
                        db_comment="Количество", verbose_name="Количество"
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        db_comment="Связь с товарами",
                        help_text="Товар, который продаем",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.item",
                        verbose_name="Товар",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        db_comment="Связь с заказом",
                        help_text="Связь с заказом",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.order",
                        verbose_name="Заказ",
                    ),
                ),
            ],
            options={
                "verbose_name": "Продажа товара в заказе",
                "verbose_name_plural": "Продажи товаров в заказе",
                "db_table": "sale_orders",
                "db_table_comment": "Продажи товаров в заказе",
            },
        ),
        migrations.CreateModel(
            name="ServiceOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "count",
                    models.IntegerField(
                        db_comment="Количество таких услуг заказанных",
                        help_text="Количество таких услуг заказанных",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Количество",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        db_comment="Связь с заказом",
                        help_text="Связь с заказом",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.order",
                    ),
                ),
                (
                    "service_type",
                    models.ForeignKey(
                        db_comment="Связь с типом услуги",
                        help_text="Связь с типом услуги",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.servicetype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Заказ услуги",
                "verbose_name_plural": "Заказы услуг",
                "db_table": "service_orders",
                "db_table_comment": "Заказ услуг",
            },
        ),
        migrations.CreateModel(
            name="FilmDevelopmentOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        db_comment="Уникальный код пленки",
                        help_text="Уникальный код пленки",
                        max_length=255,
                        unique=True,
                        verbose_name="Код",
                    ),
                ),
                (
                    "service_order",
                    models.ForeignKey(
                        db_comment="Связь с заказом",
                        help_text="Связь с заказом услуги",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.serviceorder",
                        verbose_name="Заказ",
                    ),
                ),
            ],
            options={
                "verbose_name": "Проявка пленок",
                "verbose_name_plural": "Проявка пленок",
                "db_table": "film_development_orders",
                "db_table_comment": "Проявка пленок(вложено в чек заказа)",
            },
        ),
        migrations.CreateModel(
            name="Film",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Уникальный код фотопленки",
                        max_length=255,
                        unique=True,
                        verbose_name="Код",
                    ),
                ),
                (
                    "service_order",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.serviceorder",
                        verbose_name="Услуга проявка плёнки",
                    ),
                ),
            ],
            options={
                "verbose_name": "Фотопленка",
                "verbose_name_plural": "Фотопленки",
                "db_table": "films",
            },
        ),
        migrations.CreateModel(
            name="ServiceTypeOutlet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "outlet_type",
                    models.ForeignKey(
                        help_text="Тип точки обслуживания",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.outlettype",
                        verbose_name="Тип здания",
                    ),
                ),
                (
                    "service_type",
                    models.ForeignKey(
                        help_text="Тип услуги",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.servicetype",
                        verbose_name="Тип услуги",
                    ),
                ),
            ],
            options={
                "verbose_name": "Вид услуги в точке обслуживания",
                "verbose_name_plural": "Виды услуг в точках обслуживания",
                "db_table": "service_types_outlets",
                "db_table_comment": "Типы услуг",
            },
        ),
        migrations.CreateModel(
            name="Storage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_main_storage",
                    models.BooleanField(
                        blank=True, help_text="Связь с главным складом", null=True
                    ),
                ),
                ("capacity", models.IntegerField(help_text="Вместимость")),
                (
                    "outlet",
                    models.ForeignKey(
                        help_text="Связь со зданием",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.outlet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Склад",
                "verbose_name_plural": "Склады",
                "db_table": "storage",
                "db_table_comment": "Склады зданий",
            },
        ),
        migrations.AddField(
            model_name="delivery",
            name="storage",
            field=models.ForeignKey(
                help_text="Связь с главным складом",
                on_delete=django.db.models.deletion.CASCADE,
                to="entities.storage",
                verbose_name="Склад",
            ),
        ),
        migrations.CreateModel(
            name="StorageItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveSmallIntegerField(
                        help_text="Количество товаров данного типа на складе",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Количество",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        help_text="Связь с товаром",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.item",
                        verbose_name="Товар",
                    ),
                ),
                (
                    "storage",
                    models.ForeignKey(
                        help_text="Связь со складом зданий",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.storage",
                        verbose_name="Склад",
                    ),
                ),
            ],
            options={
                "verbose_name": "Товар на складе",
                "verbose_name_plural": "Товары на складах",
                "db_table": "storage_items",
                "db_table_comment": "Товары на складах зданий",
            },
        ),
        migrations.AddField(
            model_name="delivery",
            name="vendor",
            field=models.ForeignKey(
                help_text="Какой поставщик осуществляет эту поставку",
                on_delete=django.db.models.deletion.CASCADE,
                to="entities.vendor",
                verbose_name="Поставщик",
            ),
        ),
        migrations.CreateModel(
            name="VendorItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_price",
                    models.PositiveSmallIntegerField(
                        db_comment="Текущая цена по которой продает поставщик данный товар",
                        verbose_name="Цена",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveSmallIntegerField(
                        db_comment="Текущая цена по которой продает поставщик данный товар",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Количество",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        db_comment="Связь с товаром",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.item",
                        verbose_name="Предмет",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        db_comment="Связь с поставщиком",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.vendor",
                        verbose_name="Поставщик",
                    ),
                ),
            ],
            options={
                "verbose_name": "Товар поставщика",
                "verbose_name_plural": "Товары поставщика",
                "db_table": "vendor_items",
                "db_table_comment": "По какой цене продает поставщик товары",
            },
        ),
        migrations.CreateModel(
            name="Kiosk",
            fields=[
                (
                    "outlet",
                    models.OneToOneField(
                        db_comment="Здание где расположен",
                        help_text="Связь со зданием в котором расположен киоск",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="entities.outlet",
                        verbose_name="Адрес",
                    ),
                ),
                (
                    "branch_outlet",
                    models.ForeignKey(
                        db_comment="Киоск связан с филиалом",
                        help_text="Связь с филиалом, к которому прикреплен киоск",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.branch",
                        verbose_name="Филиал",
                    ),
                ),
            ],
            options={
                "verbose_name": "Киоск",
                "verbose_name_plural": "Киоски",
                "db_table": "kiosks",
                "db_table_comment": "Киоск",
            },
        ),
        migrations.CreateModel(
            name="ServiceTypeNeededItem",
            fields=[
                (
                    "item",
                    models.OneToOneField(
                        help_text="Необходимый предмет",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="entities.item",
                        verbose_name="Товар",
                    ),
                ),
                (
                    "count",
                    models.IntegerField(
                        help_text="Количество необходимых предметов",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Количество",
                    ),
                ),
                (
                    "service_type",
                    models.ForeignKey(
                        help_text="Тип услуги, к которому относится предмет",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="entities.servicetype",
                        verbose_name="Тип",
                    ),
                ),
            ],
            options={
                "verbose_name": "Необходимые предметы для типа услуги",
                "verbose_name_plural": "Необходимые предметы для типов услуг",
                "db_table": "service_types_needed_items",
            },
        ),
        migrations.AddConstraint(
            model_name="item",
            constraint=models.UniqueConstraint(
                fields=("firm", "product_name"), name="unique_item_firm_product_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="deliveryitem",
            constraint=models.UniqueConstraint(
                fields=("delivery", "item"), name="delivery_items_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="outlet",
            constraint=models.UniqueConstraint(
                fields=("type", "address"), name="unique_type_address"
            ),
        ),
        migrations.AddConstraint(
            model_name="printprice",
            constraint=models.UniqueConstraint(
                fields=("paper_size", "paper_type"), name="unique_print_price"
            ),
        ),
        migrations.AddConstraint(
            model_name="saleorder",
            constraint=models.UniqueConstraint(
                fields=("order", "item"), name="unique_sale_order_item"
            ),
        ),
        migrations.AddConstraint(
            model_name="filmdevelopmentorder",
            constraint=models.UniqueConstraint(
                fields=("service_order", "code"), name="unique_film_development_order"
            ),
        ),
        migrations.AddConstraint(
            model_name="serviceorder",
            constraint=models.UniqueConstraint(
                fields=("service_type", "order"), name="unique_service_order"
            ),
        ),
        migrations.AddConstraint(
            model_name="storageitem",
            constraint=models.UniqueConstraint(
                fields=("storage", "item"), name="storage_items_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="vendoritem",
            constraint=models.UniqueConstraint(
                fields=("vendor", "item"), name="vendor_items_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="servicetypeneededitem",
            constraint=models.UniqueConstraint(
                fields=("item", "service_type"), name="unique_service_type_needed_item"
            ),
        ),
    ]
