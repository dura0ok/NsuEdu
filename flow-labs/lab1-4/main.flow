import string;
import lingo/pegcode/driver;
import rational;


Expr ::= IntConst, Mul, Div, Add, Sub, Neg, Var;
IntConst(value : int);
Mul(left : Expr, right : Expr);
Div(left : Expr, right : Expr);
Add(left : Expr, right : Expr);
Sub(left : Expr, right : Expr);
Neg(arg : Expr);
Var(name : string);

HighPrior ::= ToMul, ToDiv;
LowPrior ::= ToAdd, ToSub;

ToMul(arg : Expr);
ToDiv(arg : Expr);
ToAdd(arg : Expr);
ToSub(arg : Expr);


grammarOp = compilePegGrammar("#include grammar.lingo");

specialPegActions = {
    pairs = [Pair("buildHigh", buildHigh), Pair("buildLow", buildLow)];
    t = setTreeValues(defaultPegActions.t, pairs);
    SemanticActions(t);
}


buildHigh(arr : [flow]) {
    fold(arr[1], arr[0], \acc, cur -> switch(cur) {
        ToMul(arg) : Mul(acc, arg);
        ToDiv(arg) : Div(acc, arg);
    })
}

buildLow(arr : [flow]) {
    fold(arr[1], arr[0], \acc, cur -> switch(cur) {
        ToAdd(arg) : Add(acc, arg);
        ToSub(arg) : Sub(acc, arg);
    })
}


calculate(e : Expr, vars : Tree<string, RatNum>) -> Maybe<RatNum> {
    switch(e) {
        Mul(l, r) : maybeMap2(ratMul)(calculate(l, vars), calculate(r, vars));
        Div(l, r) : maybeMap2(ratDiv)(calculate(l, vars), calculate(r, vars));
        Add(l, r) : maybeMap2(ratSum)(calculate(l, vars), calculate(r, vars));
        Sub(l, r) : maybeMap2(ratSub)(calculate(l, vars), calculate(r, vars));
        Neg(a) : maybeMap(calculate(a, vars), ratNeg);
        Var(name) : lookupTree(vars, name);
        IntConst(c) : Some(RatNum(c, 1));
    }
}

e2s(e: Expr) -> string {
    switch(e) {
        IntConst(c) : i2s(c);
        Mul(l, r) : "(" + e2s(l) + " * " + e2s(r) + ")";
        Div(l, r) : "(" + e2s(l) + " / " + e2s(r) + ")";
        Add(l, r) : "(" + e2s(l) + " + " + e2s(r) + ")";
        Sub(l, r) : "(" + e2s(l) + " - " + e2s(r) + ")";
        Neg(v) : "(-" + e2s(v) + ")";
        Var(v) : v;
    }
}

r2sSome(r : RatNum) -> string {
    if (r.den == 0) {
        "Divide by zero!"
    } else if (r.den == 1) {
        i2s(r.num);
    } else {
        i2s(r.num) + "/" + i2s(r.den);
    }
}

r2s(r : Maybe<RatNum>) -> string {
    eitherMap(r, r2sSome, "None");
}

parse(src : string) -> Expr {
    parsic(grammarOp, src, specialPegActions);
}

main() {
    vars = [Pair("x", RatNum(1, 2))];
    tree = setTreeValues(TreeEmpty(), vars);
    expr = parse("x + 1/2");
    t = e2s(expr);
    println(t);
    println(calculate(expr, tree));
    quit(0);
}