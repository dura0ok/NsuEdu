import vm_grammar;
import ds/set;

export {
    translate(prog: NemoProgram) -> VMProgram;
}

findMaxLabelOfOperation(operation : Operation) -> int {
    findMaxOfArray = \a -> fold(a, 0, \acc, e -> max(acc, e));
    
    switch (operation) {
        AssignmentOperation(varName, expr, labels) : findMaxOfArray(labels);
        TestOperation(cond, ifLabels, elseLabels) : max(findMaxOfArray(ifLabels), findMaxOfArray(elseLabels));
        PrintOperation(expr, labels) : findMaxOfArray(labels);
    }
}

findMaxLabelOfOperator(operator : Operator) -> int {
    max(operator.label, findMaxLabelOfOperation(operator.operation));
}

findMaxLabelOfOperators(operators : Set<Operator>) -> int {
    foldSet(
        operators,
        0,
        \acc, op -> max(acc, findMaxLabelOfOperator(op))
    );
}

increaseLabel(label : int, delta : int) -> int {
    label + delta;
}

replaceLabel(label : int, newLabel : int, oldLabel : int) -> int {
    if (label == oldLabel) {
        newLabel;
    } else {
        label;
    }
}

increaseLabelsOfOperation(operation : Operation, delta : int) -> Operation {
    increaseLabels = \labels -> map(labels, \l -> increaseLabel(l, delta));
    
    switch (operation) {
        AssignmentOperation(varName, expr, labels) : AssignmentOperation(varName, expr, increaseLabels(labels));
        TestOperation(cond, ifLabels, elseLabels) : TestOperation(cond, increaseLabels(ifLabels), increaseLabels(elseLabels));
        PrintOperation(expr, labels) : PrintOperation(expr, increaseLabels(labels));
    }
}

replaceLabelsOfOperation(operation : Operation, newLabel : int, oldLabel : int) -> Operation {
    replaceLabels = \labels -> map(labels, \l -> replaceLabel(l, newLabel, oldLabel));
    
    switch (operation) {
        AssignmentOperation(varName, expr, labels) : AssignmentOperation(varName, expr, replaceLabels(labels));
        TestOperation(cond, ifLabels, elseLabels) : TestOperation(cond, replaceLabels(ifLabels), replaceLabels(elseLabels));
        PrintOperation(expr, labels) : PrintOperation(expr, replaceLabels(labels));
    }
}

increaseLabelsOfOperators(operators : Set<Operator>, delta : int) -> Set<Operator> {
    increaseLabelsOfOperator = \operator -> Operator(
        increaseLabel(operator.label, delta),
        increaseLabelsOfOperation(operator.operation, delta)
    );

    mapSet(operators, increaseLabelsOfOperator)
}

incrementLabelsOfOperators(operators : Set<Operator>) -> Set<Operator> {
    increaseLabelsOfOperators(operators, 1);
}

replaceLabelsOfOperators(operators : Set<Operator>, newLabel : int, oldLabel : int) -> Set<Operator> {
    replaceLabelsOfOperator = \operator -> Operator(
        replaceLabel(operator.label, newLabel, oldLabel),
        replaceLabelsOfOperation(operator.operation, newLabel, oldLabel)
    );

    mapSet(operators, replaceLabelsOfOperator);
}

bodiesToOperators(bodies : [Body], f : (firstElement : Body, tailElements : [Body]) -> Set<Operator>) -> Set<Operator> {
    len = length(bodies);

    if (len == 0) {
        makeSet();
    } else if (len == 1) {
        translateBody(bodies[0]);
    } else {
        f(bodies[0], tail(bodies));
    }
}

translateBody(body : Body) -> Set<Operator> {
    //println(body);
    trueCond = Comparison(IntConst(1), IntConst(1), EqualOperator());
    createBranchingGoto = \l -> Operator(0, TestOperation(trueCond, [1, l], []));
    createStartOperator = \op -> Operator(0, op);

    switch (body) {
        Assignment(var, expr) : makeSet1(createStartOperator(AssignmentOperation(var.name, expr, [1])));
        
        Test(booleanExpr) : makeSet1(createStartOperator(TestOperation(booleanExpr, [1], [])));
        
        Print(expr) : makeSet1(createStartOperator(PrintOperation(expr, [1])));
        
        BodiesSeq(bodies) : bodiesToOperators(
            bodies, \firstElement, tailElements -> {
                s1 = translateBody(firstElement);
                l1 = findMaxLabelOfOperators(s1);

                s2 = increaseLabelsOfOperators(
                    translateBody(BodiesSeq(tailElements)),
                    l1
                );

                mergeSets(s1, s2);
            }
        );
                    
        NonDeterministicChoice(bodies) : bodiesToOperators(
            bodies, \firstElement, tailElements -> {
                s1 = incrementLabelsOfOperators(translateBody(bodies[0]));
                l1 = findMaxLabelOfOperators(s1);

                s2 = increaseLabelsOfOperators(
                    translateBody(NonDeterministicChoice(tail(bodies))),
                    l1
                );
                l2 = findMaxLabelOfOperators(s2);

                s3 = makeSet1(createBranchingGoto(l1));

                mergeSetsA([
                    replaceLabelsOfOperators(s1, l2, l1),
                    s2,
                    s3
                ]);
            }
        );

        NonDeterministicIteration(b1) : {
            s1 = incrementLabelsOfOperators(translateBody(b1));
            l1 = findMaxLabelOfOperators(s1);

            s2 = makeSet1(createBranchingGoto(l1));

            mergeSets(
                replaceLabelsOfOperators(s1, 0, l1),
                s2
            );
        }
    }
}

translate(prog: NemoProgram) -> VMProgram {
    VMProgram(prog.varDeclList, set2array(translateBody(prog.body)));
}
